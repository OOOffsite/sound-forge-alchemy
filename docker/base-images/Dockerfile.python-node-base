# Dockerfile.python-node-base
# Base image with both Python and Node.js for services that need both runtimes

FROM node:20-alpine AS node-builder

# Set working directory for the build stage
WORKDIR /build

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++

# Copy package files for better layer caching
COPY package*.json ./
RUN npm i
RUN npm ci --only=production

# Final image
FROM python:3.10-slim-bullseye

# Install Node.js
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    gnupg \
    tini \
    ffmpeg \
    ca-certificates && \
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Add non-root user
RUN groupadd -r soundforge && \
    useradd -r -g soundforge -d /app soundforge

# Set working directory
WORKDIR /app

# Copy built node dependencies
COPY --from=node-builder --chown=soundforge:soundforge /build/node_modules /app/node_modules
# RUN npm install

# Environment variables
ENV TZ=UTC \
    NODE_ENV=production \
    PYTHONUNBUFFERED=1 \
    PORT=3000 \
    PATH="/app/node_modules/.bin:${PATH}"

# Set proper permissions
RUN chown -R soundforge:soundforge /app

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-3000}/health || exit 1

# Expose default port
EXPOSE 3000

# Use tini as entrypoint for proper signal handling
ENTRYPOINT ["/usr/bin/tini", "--"]

# Switch to non-root user
USER soundforge

# Default command
CMD ["node", "server.js"]