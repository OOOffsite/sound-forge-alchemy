version: '3.9'

# Base services configuration for all environments
services:
  # Base images - these are not deployed as containers
  sound-forge-base:
    image: sound-forge-base:latest
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile.sound-forge-base

  node-base:
    image: node-base:latest
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile.node-base
    depends_on:
      - sound-forge-base

  python-node-base:
    image: python-node-base:latest
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile.python-node-base
    depends_on:
      - sound-forge-base

  gpu-base:
    image: gpu-base:latest
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile.gpu-base

  # Frontend service
  frontend:
    image: sound-forge-frontend:latest
    build:
      context: ./src
      dockerfile: ../docker/services/Dockerfile.frontend
    ports:
      - "8001:8001"
    networks:
      - frontend-network
      - websocket-network
    depends_on:
      - api-gateway
    environment:
      - VITE_API_URL=http://api-gateway:3000
      - VITE_WEBSOCKET_URL=ws://websocket-service:3006
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # API Gateway
  api-gateway:
    image: sound-forge-api-gateway:latest
    build:
      context: ./backend/api-gateway
      dockerfile: ../../docker/services/Dockerfile.api-gateway
    ports:
      - "3000:3000"
    networks:
      - frontend-network
      - api-gateway-network
    depends_on:
      - spotify-service
      - download-service
      - processing-service
      - analysis-service
      - websocket-service
    environment:
      - PORT=3000
      - SERVICE_NAME=api-gateway
      - SPOTIFY_SERVICE_URL=http://spotify-service:3001
      - DOWNLOAD_SERVICE_URL=http://download-service:3002
      - PROCESSING_SERVICE_URL=http://processing-service:3003
      - ANALYSIS_SERVICE_URL=http://analysis-service:3004
      - WEBSOCKET_SERVICE_URL=http://websocket-service:3006
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=redis://redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Spotify Service
  spotify-service:
    image: sound-forge-spotify-service:latest
    build:
      context: ./backend/spotify-service
      dockerfile: ../../docker/services/Dockerfile.spotify-service
    ports:
      - "3001:3001"
    networks:
      - api-gateway-network
      - service-mesh-network
      - data-network
    depends_on:
      - redis
      - node-base
    environment:
      - PORT=3001
      - SERVICE_NAME=spotify-service
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - REDIS_URL=redis://redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # Download Service
  download-service:
    image: sound-forge-download-service:latest
    build:
      context: ./backend/download-service
      dockerfile: ../../docker/services/Dockerfile.download-service
    ports:
      - "3002:3002"
    networks:
      - api-gateway-network
      - service-mesh-network
      - data-network
    depends_on:
      - redis
      - python-node-base
    volumes:
      - audio_data:/app/audio_data
    environment:
      - PORT=3002
      - SERVICE_NAME=download-service
      - REDIS_URL=redis://redis:6379
      - AUDIO_DATA_PATH=/app/audio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Processing Service (dynamically configured for GPU/CPU)
  processing-service:
    image: sound-forge-processing-service:${USE_GPU:-false}
    build:
      context: ./backend/processing-service
      dockerfile: ${USE_GPU:-false} == "true" ? ../../docker/services/Dockerfile.processing-service : ../../docker/services/Dockerfile.processing-service.cpu
    ports:
      - "3003:3003"
    networks:
      - api-gateway-network
      - service-mesh-network
      - data-network
      - websocket-network
    depends_on:
      - redis
      - websocket-service
      - ${USE_GPU:-false} == "true" ? gpu-base : python-node-base
    volumes:
      - audio_data:/app/audio_data
    environment:
      - PORT=3003
      - SERVICE_NAME=processing-service
      - REDIS_URL=redis://redis:6379
      - AUDIO_DATA_PATH=/app/audio_data
      - WEBSOCKET_SERVICE_URL=http://websocket-service:3006
      - USE_GPU=${USE_GPU:-false}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          devices:
            - driver: ${GPU_DRIVER:-none}
              count: ${GPU_COUNT:-0}
              capabilities: [${GPU_CAPABILITIES:-""}]

  # Analysis Service
  analysis-service:
    image: sound-forge-analysis-service:latest
    build:
      context: ./backend/analysis-service
      dockerfile: ../../docker/services/Dockerfile.analysis-service
    ports:
      - "3004:3004"
    networks:
      - api-gateway-network
      - service-mesh-network
      - data-network
    depends_on:
      - redis
      - python-node-base
    volumes:
      - audio_data:/app/audio_data
    environment:
      - PORT=3004
      - SERVICE_NAME=analysis-service
      - REDIS_URL=redis://redis:6379
      - AUDIO_DATA_PATH=/app/audio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # WebSocket Service
  websocket-service:
    image: sound-forge-websocket-service:latest
    build:
      context: ./backend/websocket-service
      dockerfile: ../../docker/services/Dockerfile.websocket-service
    ports:
      - "3006:3006"
    networks:
      - api-gateway-network
      - service-mesh-network
      - websocket-network
      - data-network
    depends_on:
      - redis
      - node-base
    environment:
      - PORT=3006
      - SERVICE_NAME=websocket-service
      - REDIS_URL=redis://redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # Redis - Shared data store and message broker
  redis:
    image: redis:7.2-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "6379:6379"
    networks:
      - data-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispassword}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

networks:
  # Frontend network - connects client-facing services
  frontend-network:
    driver: bridge
    name: sound-forge-frontend-network

  # API Gateway network - connects API Gateway to backend services
  api-gateway-network:
    driver: bridge
    name: sound-forge-api-gateway-network

  # Service Mesh network - internal communication between backend services
  service-mesh-network:
    driver: bridge
    name: sound-forge-service-mesh-network

  # Data network - for data storage and persistence
  data-network:
    driver: bridge
    name: sound-forge-data-network

  # WebSocket network - for real-time communication
  websocket-network:
    driver: bridge
    name: sound-forge-websocket-network

volumes:
  # Audio data volume - shared between services that need to access audio files
  audio_data:
    name: sound-forge-audio-data
    
  # Redis data volume - for Redis persistence
  redis_data:
    name: sound-forge-redis-data